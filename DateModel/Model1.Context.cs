//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DateModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AccountEntities : DbContext
    {
        public AccountEntities()
            : base("name=AccountEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<USER> USERS { get; set; }
        public virtual DbSet<VW_USERS> VW_USERS { get; set; }
        public virtual DbSet<PRODUCT> PRODUCTS { get; set; }
        public virtual DbSet<VW_PRODUCTS> VW_PRODUCTS { get; set; }
        public virtual DbSet<PRODUCTPRICE> PRODUCTPRICEs { get; set; }
        public virtual DbSet<VW_PRODUCTPRICE> VW_PRODUCTPRICE { get; set; }
        public virtual DbSet<TRANSACTION> TRANSACTIONs { get; set; }
        public virtual DbSet<USERSLOG> USERSLOGs { get; set; }
        public virtual DbSet<VW_USERSLOG> VW_USERSLOG { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<HISTORY> HISTORies { get; set; }
        public virtual DbSet<VW_CUSTOMERS> VW_CUSTOMERS { get; set; }
        public virtual DbSet<FACTOR> FACTORs { get; set; }
        public virtual DbSet<VW_TRANSACTION> VW_TRANSACTION { get; set; }
        public virtual DbSet<FACTORITEM> FACTORITEMS { get; set; }
        public virtual DbSet<VW_FACTORITEMS> VW_FACTORITEMS { get; set; }
        public virtual DbSet<VW_FACTORS> VW_FACTORS { get; set; }
    
        public virtual int SP_INSERT_USERS(string nAME, string fAMILY, Nullable<byte> aGE, Nullable<byte> sEX, string uSERNAME, string pASSWORD, string aDDRESS, string sTARTDATE, string pHONE)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var fAMILYParameter = fAMILY != null ?
                new ObjectParameter("FAMILY", fAMILY) :
                new ObjectParameter("FAMILY", typeof(string));
    
            var aGEParameter = aGE.HasValue ?
                new ObjectParameter("AGE", aGE) :
                new ObjectParameter("AGE", typeof(byte));
    
            var sEXParameter = sEX.HasValue ?
                new ObjectParameter("SEX", sEX) :
                new ObjectParameter("SEX", typeof(byte));
    
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            var pASSWORDParameter = pASSWORD != null ?
                new ObjectParameter("PASSWORD", pASSWORD) :
                new ObjectParameter("PASSWORD", typeof(string));
    
            var aDDRESSParameter = aDDRESS != null ?
                new ObjectParameter("ADDRESS", aDDRESS) :
                new ObjectParameter("ADDRESS", typeof(string));
    
            var sTARTDATEParameter = sTARTDATE != null ?
                new ObjectParameter("STARTDATE", sTARTDATE) :
                new ObjectParameter("STARTDATE", typeof(string));
    
            var pHONEParameter = pHONE != null ?
                new ObjectParameter("PHONE", pHONE) :
                new ObjectParameter("PHONE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_USERS", nAMEParameter, fAMILYParameter, aGEParameter, sEXParameter, uSERNAMEParameter, pASSWORDParameter, aDDRESSParameter, sTARTDATEParameter, pHONEParameter);
        }
    
        public virtual int SP_INSERT_PRODUCTS(string nAME, string dISCRIPTION, byte[] iMG, string dATE, Nullable<int> uSERID)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var dISCRIPTIONParameter = dISCRIPTION != null ?
                new ObjectParameter("DISCRIPTION", dISCRIPTION) :
                new ObjectParameter("DISCRIPTION", typeof(string));
    
            var iMGParameter = iMG != null ?
                new ObjectParameter("IMG", iMG) :
                new ObjectParameter("IMG", typeof(byte[]));
    
            var dATEParameter = dATE != null ?
                new ObjectParameter("DATE", dATE) :
                new ObjectParameter("DATE", typeof(string));
    
            var uSERIDParameter = uSERID.HasValue ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_PRODUCTS", nAMEParameter, dISCRIPTIONParameter, iMGParameter, dATEParameter, uSERIDParameter);
        }
    
        public virtual int SP_UPDATE_PRODUCTS(Nullable<int> iD, Nullable<long> lASTPRICE, Nullable<long> lASTPURCHFEE)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var lASTPRICEParameter = lASTPRICE.HasValue ?
                new ObjectParameter("LASTPRICE", lASTPRICE) :
                new ObjectParameter("LASTPRICE", typeof(long));
    
            var lASTPURCHFEEParameter = lASTPURCHFEE.HasValue ?
                new ObjectParameter("LASTPURCHFEE", lASTPURCHFEE) :
                new ObjectParameter("LASTPURCHFEE", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPDATE_PRODUCTS", iDParameter, lASTPRICEParameter, lASTPURCHFEEParameter);
        }
    
        public virtual int SP_INSERT_TRANSACTION(Nullable<int> cOUNT, string dIS, string dATE, Nullable<int> uSERSID, Nullable<int> pRODUCTSID)
        {
            var cOUNTParameter = cOUNT.HasValue ?
                new ObjectParameter("COUNT", cOUNT) :
                new ObjectParameter("COUNT", typeof(int));
    
            var dISParameter = dIS != null ?
                new ObjectParameter("DIS", dIS) :
                new ObjectParameter("DIS", typeof(string));
    
            var dATEParameter = dATE != null ?
                new ObjectParameter("DATE", dATE) :
                new ObjectParameter("DATE", typeof(string));
    
            var uSERSIDParameter = uSERSID.HasValue ?
                new ObjectParameter("USERSID", uSERSID) :
                new ObjectParameter("USERSID", typeof(int));
    
            var pRODUCTSIDParameter = pRODUCTSID.HasValue ?
                new ObjectParameter("PRODUCTSID", pRODUCTSID) :
                new ObjectParameter("PRODUCTSID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_TRANSACTION", cOUNTParameter, dISParameter, dATEParameter, uSERSIDParameter, pRODUCTSIDParameter);
        }
    
        public virtual int SP_UPDATE_PRODUCTLASTSUPLY(Nullable<int> iD, Nullable<int> sUPLY)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sUPLYParameter = sUPLY.HasValue ?
                new ObjectParameter("SUPLY", sUPLY) :
                new ObjectParameter("SUPLY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPDATE_PRODUCTLASTSUPLY", iDParameter, sUPLYParameter);
        }
    
        public virtual int SP_UPDATE_USERLOG(Nullable<int> uSERSID, string eXITTIME)
        {
            var uSERSIDParameter = uSERSID.HasValue ?
                new ObjectParameter("USERSID", uSERSID) :
                new ObjectParameter("USERSID", typeof(int));
    
            var eXITTIMEParameter = eXITTIME != null ?
                new ObjectParameter("EXITTIME", eXITTIME) :
                new ObjectParameter("EXITTIME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPDATE_USERLOG", uSERSIDParameter, eXITTIMEParameter);
        }
    
        public virtual int SP_USERS_PASS_CHANGE(Nullable<int> iD, string pASSWORD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var pASSWORDParameter = pASSWORD != null ?
                new ObjectParameter("PASSWORD", pASSWORD) :
                new ObjectParameter("PASSWORD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_USERS_PASS_CHANGE", iDParameter, pASSWORDParameter);
        }
    }
}
